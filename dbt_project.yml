# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'my_new_project'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
#profile: 

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In dbt, the default materialization for a model is a view. This means, when you run 
# dbt run or dbt build, all of your models will be built as a view in your data platform. 
# The configuration below will override this setting for models in the example folder to 
# instead be materialized as tables. Any models you add to the root of the models folder will 
# continue to be built as views. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.



on-run-start:
  - "CREATE TABLE IF NOT EXISTS monitoring.audit_log ( model_name STRING, status STRING, started_at TIMESTAMP, finished_at TIMESTAMP, duration_seconds FLOAT64 )"
  - CREATE TABLE IF NOT EXISTS monitoring.details_execution (model_name STRING, status STRING, started_at TIMESTAMP, finished_at TIMESTAMP, duration_seconds FLOAT64, run_id STRING, environment STRING, user STRING, project_name STRING, models_success INT64, models_failed INT64, total_models INT64, execution_status STRING, error_message STRING);


on-run-end:
  - "{{ notify_run_end() }}"


models:
  my_new_project:
    staging:
      +schema: dbt_staging
      +enabled: true
      +materialized: table
      +pre-hook: #Insérer des logs après chaque modèle & donne automatiquement les droits d’accès à ton rôle analytique
          - "INSERT INTO  monitoring.audit_log VALUES ('{{ this }}','started' ,CURRENT_TIMESTAMP(),NULL,NULL)"
          #- "GRANT SELECT ON {{ this }} TO ROLE analyst_readonly"
      +post-hook:
        - UPDATE monitoring.audit_log SET status='completed', finished_at=CURRENT_TIMESTAMP(), duration_seconds=TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), started_at, SECOND) WHERE model_name='{{ this }}' AND finished_at IS NULL;
    warhouse:
      +schema: dbt_warhouse
      +enabled: true
      +materialized: table
      dim_date:
        +materialized: view
      +post-hook: #Insérer des logs après chaque modèle & donne automatiquement les droits d’accès à ton rôle analytique
          - "INSERT INTO  monitoring.audit_log VALUES ('{{ this }}','started' ,CURRENT_TIMESTAMP(),NULL,NULL)"
          #- "GRANT SELECT ON {{ this }} TO ROLE analyst_readonly"
tests:
  my_new_project:
  +severity: warn
flags:
  require_generic_test_arguments_property: true